spi:
  clk_pin: GPIO7
  mosi_pin: GPIO9
  miso_pin: GPIO8 # Optional for display-only

display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: GPIO4
    dc_pin: GPIO2
    reset_pin: GPIO3
    rotation: ${display_rotation}
    data_rate: ${display_data_rate}
    update_interval: ${display_update_interval}
    invert_colors: False
    pages:
      - id: page_idle
        lambda: |-
          auto format_weather_condition = [](const std::string& condition_str) -> std::string {
            if (condition_str == "partlycloudy") return "Partly Cloudy";
            if (condition_str == "cloudy") return "Cloudy";
            if (condition_str == "sunny") return "Sunny";
            if (condition_str == "rain" || condition_str == "rainy") return "Rainy";
            if (condition_str == "snow" || condition_str == "snowy") return "Snowy";
            if (condition_str == "clear-night") return "Clear Night";
            if (condition_str == "fog") return "Fog";
            if (condition_str == "wind" || condition_str == "windy") return "Windy";
            if (condition_str == "hail") return "Hail";
            if (condition_str == "lightning") return "Lightning";
            if (condition_str == "lightning-rainy") return "Lightning Storm";
            if (condition_str == "pouring") return "Pouring";
            if (condition_str == "windy-variant") return "Windy";
            if (condition_str == "exceptional") return "Weather Alert";
            if (!condition_str.empty()) {
                std::string s = condition_str;
                s[0] = toupper(s[0]);
                size_t pos = 0;
                while ((pos = s.find("_", pos)) != std::string::npos) {
                    s.replace(pos, 1, " ");
                    if (pos + 1 < s.length()) {
                        s[pos+1] = toupper(s[pos+1]);
                    }
                }
                return s;
            }
            return "Weather N/A";
          };

          auto get_weather_icon = [](const std::string& condition_str) -> std::string {
            if (condition_str == "sunny") return "\U000F0599";                 // mdi-weather-sunny
            if (condition_str == "clear-night") return "\U000F0594";          // mdi-weather-night
            if (condition_str == "partlycloudy") return "\U000F0595";       // mdi-weather-partly-cloudy
            if (condition_str == "cloudy") return "\U000F0590";                // mdi-weather-cloudy
            if (condition_str == "fog") return "\U000F0591";                   // mdi-weather-fog
            if (condition_str == "hail") return "\U000F0592";                  // mdi-weather-hail
            if (condition_str == "lightning") return "\U000F0593";             // mdi-weather-lightning
            if (condition_str == "lightning-rainy") return "\U000F067E";      // mdi-weather-lightning-rainy
            if (condition_str == "pouring") return "\U000F0596";               // mdi-weather-pouring
            if (condition_str == "rainy" || condition_str == "rain") return "\U000F0597"; // mdi-weather-rainy
            if (condition_str == "snowy" || condition_str == "snow") return "\U000F0598"; // mdi-weather-snowy
            if (condition_str == "snowy-rainy") return "\U000F067F";         // mdi-weather-snowy-rainy
            if (condition_str == "windy" || condition_str == "wind") return "\U000F059D"; // mdi-weather-windy
            if (condition_str == "windy-variant") return "\U000F059D";       // mdi-weather-windy (alias)
            if (condition_str == "exceptional") return "\U000F0F37";         // mdi-weather-sunny-alert (or a more generic alert icon)
            return ""; // Return empty for unknown, or a fallback glyph
          };

          int center_x = it.get_width() / 2;
          int mid_split_y = it.get_height() / 2;

          // Top half - Beige background
          it.filled_rectangle(0, 0, it.get_width(), mid_split_y, id(COLOR_BEIGE_BG));
          // "Hey Jarvis" text - Dark Teal
          it.printf(center_x, mid_split_y / 2, id(font_large), id(COLOR_DARK_TEAL_BG), TextAlign::CENTER, "Hey Jarvis");

          // Bottom half - Dark Teal background
          it.filled_rectangle(0, mid_split_y, it.get_width(), it.get_height() - mid_split_y, id(COLOR_DARK_TEAL_BG));

          // Weather Icon - Beige
          float icon_y = mid_split_y + 35; // Adjusted for icon size
          if (id(esp_weather_condition).has_state()) {
            std::string icon_char = get_weather_icon(id(esp_weather_condition).state);
            if (!icon_char.empty()) {
              it.printf(center_x, icon_y, id(font_weather_icons), id(COLOR_BEIGE_BG), TextAlign::CENTER, "%s", icon_char.c_str());
            }
          }

          // Temperature text - Beige
          float temp_y = mid_split_y + 90; // Positioned below icon
          if (id(esp_weather_temp_value).has_state() && id(esp_weather_temp_unit).has_state()) {
            it.printf(center_x, temp_y, id(font_large), id(COLOR_BEIGE_BG), TextAlign::CENTER, "%.0f%s", id(esp_weather_temp_value).state, id(esp_weather_temp_unit).state.c_str());
          } else {
            it.printf(center_x, temp_y, id(font_large), id(COLOR_BEIGE_BG), TextAlign::CENTER, "N/A");
          }
          
          // Weather condition text - Beige
          float cond_y = mid_split_y + 125; // Positioned below temperature
          if (id(esp_weather_condition).has_state()) {
            std::string formatted_condition = format_weather_condition(id(esp_weather_condition).state);
            it.printf(center_x, cond_y, id(font_medium), id(COLOR_BEIGE_BG), TextAlign::CENTER, "%s", formatted_condition.c_str());
          } else {
            it.printf(center_x, cond_y, id(font_medium), id(COLOR_BEIGE_BG), TextAlign::CENTER, "Weather N/A");
          }
      - id: page_listening
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          int center_x = it.get_width() / 2;
          // Display "Listening..." in the top part
          it.printf(center_x, it.get_height() / 3, id(font_large), esphome::COLOR_WHITE, TextAlign::CENTER, "Listening...");
          // Display a prompt to speak in the bottom part
          it.printf(center_x, it.get_height() * 2 / 3, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, "Speak now...");
      - id: page_thinking
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          int center_x = it.get_width() / 2;
          // Display "Thinking..." in the top part
          it.printf(center_x, it.get_height() / 3, id(font_large), esphome::COLOR_WHITE, TextAlign::CENTER, "Thinking...");
          // Display the recognized text in the bottom part
          if (!id(assistant_response_text).empty()) {
            it.printf(center_x, it.get_height() * 2 / 3, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, id(assistant_response_text).c_str());
          }
      - id: page_speaking
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          // Basic word wrapping is not implemented here. Text might be cut off.
          // For a better UX, more complex lambda or a custom function would be needed.
          it.print(10, 20, id(font_medium), esphome::COLOR_WHITE, id(assistant_response_text).c_str());
      - id: page_error
        lambda: |-
          it.fill(id(COLOR_RED));
          it.printf(it.get_width() / 2, 120, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, "Error");

font:
  - file: "gfonts://Roboto"
    id: font_large
    size: 32
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  - file: "gfonts://Roboto"
    id: font_medium
    size: 20
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  - file: "gfonts://Roboto"
    id: font_small # For potentially longer text or details
    size: 16
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

  - file: 'fonts/materialdesignicons-webfont.ttf' # Ensure this font file is in your /fonts directory
    id: font_weather_icons
    size: 60 # Adjust size as needed
    glyphs:  # Common weather glyphs from MDI
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0594" # mdi-weather-night
      - "\U000F0595" # mdi-weather-partly-cloudy
      # - "\U000F0F31" # mdi-weather-night-partly-cloudy (use partly-cloudy for night too if night variant not always desired)
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F059D" # mdi-weather-windy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F37" # mdi-weather-sunny-alert (for exceptional)
      # Add any other specific icons you need here

globals:
  - id: assistant_response_text
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: display_width
    type: int
    restore_value: no
    initial_value: '240'
  - id: display_height
    type: int
    restore_value: no
    initial_value: '320'

color:
  - id: COLOR_BLUE
    red: 0.2
    green: 0.2
    blue: 0.8
  - id: COLOR_RED
    red: 0.8
    green: 0.1
    blue: 0.1
  - id: COLOR_BEIGE_BG #EFE5D0
    hex: "EFE5D0"
  - id: COLOR_DARK_TEAL_BG #36555B
    hex: "36555B"

voice_assistant:
  on_listening:
    then:
      - display.page.show: page_listening
  
  on_stt_end:
    then:
      - lambda: |-
          id(assistant_response_text) = x;
      - display.page.show: page_thinking
  
  on_start:
   - display.page.show: page_listening

  on_error:
    - display.page.show: page_error
    - delay: 3s
    - display.page.show: page_idle
  
  on_end:
    - display.page.show: page_idle

sensor:
  - platform: homeassistant
    id: esp_weather_temp_value
    entity_id: weather.forecast_casa_sp
    attribute: temperature
    internal: true
    accuracy_decimals: 0

text_sensor:
  - platform: homeassistant
    id: esp_weather_temp_unit
    entity_id: weather.forecast_casa_sp
    attribute: temperature_unit
    internal: true
  - platform: homeassistant
    id: esp_weather_condition
    entity_id: weather.forecast_casa_sp
    internal: true

