spi:
  clk_pin: GPIO7
  mosi_pin: GPIO9
  miso_pin: GPIO8

display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: GPIO4
    dc_pin: GPIO2
    reset_pin: GPIO3
    rotation: ${display_rotation}
    data_rate: ${display_data_rate}
    update_interval: ${display_update_interval}
    auto_clear_enabled: false # LVGL handles clearing
    # The old 'pages:' lambda block is removed here

lvgl:
  id: main_lvgl
  theme:
    name: default # Explicitly set default theme
    primary_font: font_medium 
  pages:
    - id: lvgl_page_idle
      widgets:
        # Background is implicitly the page itself, styled later or globally
        - type: label # "Hey Jarvis"
          id: lbl_hey_jarvis
          text: "Hey Jarvis"
          align: TOP_MID
          x: 0
          y: 35
          style:
            text_font: font_large # Corrected
            text_color: !color COLOR_TEXT_ICON_TEAL
        - type: obj # Main Card
          id: card_idle
          width: lv.pct(90) # 90% of parent (screen) width
          height: lv.pct(70) # 70% of parent (screen) height
          align: CENTER
          y: 30 # Offset down slightly from true center to make space for "Hey Jarvis"
          style:
            bg_color: !color COLOR_CARD_BACKGROUND
            radius: 20
            border_width: 0
          widgets:
            - type: label # Weather Icon
              id: lbl_weather_icon_idle
              align: TOP_MID
              y: 25 
              style:
                text_font: font_weather_icons # Corrected
                # text_color is set dynamically
            - type: label # Temperature
              id: lbl_temperature_idle
              align: CENTER
              y: 15 # Offset slightly due to large font
              style:
                text_font: font_temperature # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
            - type: label # Weather Condition
              id: lbl_condition_idle
              align: BOTTOM_MID
              y: -25
              style:
                text_font: font_medium # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
    
    - id: lvgl_page_listening
      widgets:
        - type: obj # Card
          id: card_listening
          width: lv.pct(90)
          height: 200
          align: CENTER
          style:
            bg_color: !color COLOR_CARD_BACKGROUND
            radius: 20
            border_width: 0
          widgets:
            - type: label
              text: "Listening..."
              align: CENTER
              y: -30
              style:
                text_font: font_large # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
            - type: label
              text: "Speak now..."
              align: CENTER
              y: 30
              style:
                text_font: font_medium # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL

    - id: lvgl_page_thinking
      widgets:
        - type: obj # Card
          id: card_thinking
          width: lv.pct(90)
          height: 200
          align: CENTER
          style:
            bg_color: !color COLOR_CARD_BACKGROUND
            radius: 20
            border_width: 0
          widgets:
            - type: label
              text: "Thinking..."
              align: CENTER
              y: -30
              style:
                text_font: font_large # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
            - type: label
              id: lbl_stt_result_thinking # For recognized text
              align: CENTER
              y: 30
              style:
                text_font: font_medium # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
                text_long_mode: WRAP
              width: lv.pct(90) # Allow wrapping within the label

    - id: lvgl_page_speaking
      widgets:
        - type: obj # Card for assistant response
          id: card_speaking
          width: lv.pct(90)
          height: lv.pct(80)
          align: CENTER
          style:
            bg_color: !color COLOR_CARD_BACKGROUND
            radius: 20
            border_width: 0
          widgets:
            - type: label
              id: lbl_tts_output_speaking
              align: TOP_LEFT
              x: 10 
              y: 10
              width: lv.pct(95) # Width relative to parent (card)
              style:
                text_font: font_medium # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
                text_long_mode: WRAP # Enable text wrapping

    - id: lvgl_page_error
      widgets:
        - type: obj # Card
          id: card_error
          width: lv.pct(90)
          height: 100
          align: CENTER
          style:
            bg_color: !color COLOR_CARD_BACKGROUND
            radius: 20
            border_width: 0
          widgets:
            - type: label
              text: "Error"
              align: CENTER
              style:
                text_font: font_large # Corrected
                text_color: !color COLOR_TEXT_ICON_TEAL
  
  # Global style for all pages (screens)
  style:
    bg_color: !color COLOR_BACKGROUND_MAIN # Solid background

font:
  - file: "gfonts://Nunito Sans"
    id: font_large
    size: 28
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  - file: "gfonts://Nunito Sans"
    id: font_temperature
    size: 72
    glyphs: "°0123456789CF"
  - file: "gfonts://Nunito Sans"
    id: font_medium
    size: 18
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  - file: "gfonts://Nunito Sans"
    id: font_small
    size: 14
    glyphs: "°0123456789 .,!?%&()[]{}<>:;'/\\\"+-*=_^|~`#áéíóúñÁÉÍÓÚÑçÇãõÃÕàèìòùÀÈÌÒÙâêîôûÂÊÎÔÛäëïöüÄËÏÖÜABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_weather_icons
    size: 55
    glyphs:
      - "\\U000F0599" # mdi-weather-sunny
      - "\\U000F0594" # mdi-weather-night
      - "\\U000F0595" # mdi-weather-partly-cloudy
      - "\\U000F0590" # mdi-weather-cloudy
      - "\\U000F0591" # mdi-weather-fog
      - "\\U000F0597" # mdi-weather-rainy
      - "\\U000F0598" # mdi-weather-snowy
      - "\\U000F067F" # mdi-weather-snowy-rainy
      - "\\U000F0596" # mdi-weather-pouring
      - "\\U000F067E" # mdi-weather-lightning-rainy
      - "\\U000F0593" # mdi-weather-lightning
      - "\\U000F059D" # mdi-weather-windy
      - "\\U000F0F37" # mdi-weather-sunny-alert

globals:
  - id: assistant_response_text
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: display_width # Still useful for reference, though LVGL manages sizes
    type: int
    restore_value: no
    initial_value: '240'
  - id: display_height
    type: int
    restore_value: no
    initial_value: '320'
  # C++ helper lambdas for weather formatting (can be called from ESPHome lambdas)
  - id: format_weather_condition_cpp
    type: |-
      std::function<std::string(std::string)>
    initial_value: !lambda |-
      return [](const std::string& condition_str) -> std::string {
        if (condition_str == "partlycloudy") return "Partly Cloudy";
        if (condition_str == "cloudy") return "Cloudy";
        if (condition_str == "sunny") return "Sunny";
        if (condition_str == "rain" || condition_str == "rainy") return "Rainy";
        if (condition_str == "snow" || condition_str == "snowy") return "Snowy";
        if (condition_str == "clear-night") return "Clear Night";
        if (condition_str == "fog") return "Fog";
        if (condition_str == "wind" || condition_str == "windy") return "Windy";
        if (condition_str == "hail") return "Hail";
        if (condition_str == "lightning") return "Lightning";
        if (condition_str == "lightning-rainy") return "Lightning Storm";
        if (condition_str == "pouring") return "Pouring";
        if (condition_str == "windy-variant") return "Windy";
        if (condition_str == "exceptional") return "Weather Alert";
        if (!condition_str.empty()) {
            std::string s = condition_str;
            s[0] = toupper(s[0]);
            size_t pos = 0;
            while ((pos = s.find("_", pos)) != std::string::npos) {
                s.replace(pos, 1, " ");
                if (pos + 1 < s.length()) {
                    s[pos+1] = toupper(s[pos+1]);
                }
            }
            return s;
        }
        return "Weather N/A";
      };
  - id: get_weather_icon_glyph_cpp
    type: |-
      std::function<std::string(std::string)>
    initial_value: !lambda |-
      return [](const std::string& condition_str) -> std::string {
        if (condition_str == "sunny") return "\\U000F0599";
        if (condition_str == "clear-night") return "\\U000F0594";
        if (condition_str == "partlycloudy") return "\\U000F0595";
        if (condition_str == "cloudy") return "\\U000F0590";
        if (condition_str == "fog") return "\\U000F0591";
        if (condition_str == "hail") return "\\U000F0592";
        if (condition_str == "lightning") return "\\U000F0593";
        if (condition_str == "lightning-rainy") return "\\U000F067E";
        if (condition_str == "pouring") return "\\U000F0596";
        if (condition_str == "rainy" || condition_str == "rain") return "\\U000F0597";
        if (condition_str == "snowy" || condition_str == "snow") return "\\U000F0598";
        if (condition_str == "snowy-rainy") return "\\U000F067F";
        if (condition_str == "windy" || condition_str == "wind" || condition_str == "windy-variant") return "\\U000F059D";
        if (condition_str == "exceptional") return "\\U000F0F37";
        return ""; // Default/unknown icon
      };

color:
  - id: COLOR_BACKGROUND_MAIN # New solid background color
    hex: "F7C991"
  - id: COLOR_CARD_BACKGROUND # Soft off-white cream - Should be #FAF4EA
    hex: "FAF4EA"
  - id: COLOR_TEXT_ICON_TEAL # Muted teal
    hex: "3A6666"
  - id: COLOR_SUN_ICON # Warm golden yellow for sun
    hex: "F4B940"
  # Keep old colors in case they are used by other includes not visible here
  - id: COLOR_BLUE 
    red: 0.2
    green: 0.2
    blue: 0.8
  - id: COLOR_RED
    red: 0.8
    green: 0.1
    blue: 0.1
  - id: COLOR_BEIGE_BG # Old - can be removed if no longer used by any includes
    hex: "EFE5D0"
  - id: COLOR_DARK_TEAL_BG # Old - can be removed if no longer used by any includes
    hex: "36555B"

voice_assistant:
  on_listening:
    then:
      - lvgl.page.show: lvgl_page_listening
  on_stt_end:
    then:
      - lambda: id(assistant_response_text) = x;
      - lvgl.widget.set_property:
          id: lbl_stt_result_thinking # Target the label in the thinking page
          name: text
          value: !lambda return id(assistant_response_text).c_str();
      - lvgl.page.show: lvgl_page_thinking
  on_start:
   - lvgl.page.show: lvgl_page_listening
  on_tts_start:
    then:
      - lambda: id(assistant_response_text) = x;
      - lvgl.widget.set_property:
          id: lbl_tts_output_speaking # Target the label in the speaking page
          name: text
          value: !lambda return id(assistant_response_text).c_str();
      - lvgl.page.show: lvgl_page_speaking
  on_error:
    - lvgl.page.show: lvgl_page_error
    - delay: 3s
    - lvgl.page.show: lvgl_page_idle
  on_end:
    - lambda: id(assistant_response_text) = ""; # Clear the global for next time
    - lvgl.widget.set_property: # Clear text on thinking page
        id: lbl_stt_result_thinking
        name: text
        value: ""
    - lvgl.widget.set_property: # Clear text on speaking page
        id: lbl_tts_output_speaking
        name: text
        value: ""
    - lvgl.page.show: lvgl_page_idle

sensor:
  - platform: homeassistant
    id: esp_weather_temp_value
    entity_id: weather.forecast_casa_sp
    attribute: temperature
    internal: true
    accuracy_decimals: 0
    on_value: # Update LVGL label when value changes
      then:
        - if:
            condition: 
              and:
                - lambda: 'return id(esp_weather_temp_value).has_state();'
                - lambda: 'return id(esp_weather_temp_unit).has_state();'
            then:
              - lvgl.widget.set_property:
                  id: lbl_temperature_idle
                  name: text
                  value: !lambda |-
                    return esphome::parse_printf("%.0f%s", id(esp_weather_temp_value).state, id(esp_weather_temp_unit).state.c_str());
            else:
              - lvgl.widget.set_property:
                  id: lbl_temperature_idle
                  name: text
                  value: "N/A"

text_sensor:
  - platform: homeassistant
    id: esp_weather_temp_unit
    entity_id: weather.forecast_casa_sp
    attribute: temperature_unit
    internal: true
    on_value: # Trigger temp update when unit changes (ensures correct concatenation)
      then:
        - if:
            condition:
              and:
                - lambda: 'return id(esp_weather_temp_value).has_state();'
                - lambda: 'return id(esp_weather_temp_unit).has_state();'
            then:
              - lvgl.widget.set_property:
                  id: lbl_temperature_idle
                  name: text
                  value: !lambda |-
                    return esphome::parse_printf("%.0f%s", id(esp_weather_temp_value).state, id(esp_weather_temp_unit).state.c_str());
            else:
              - lvgl.widget.set_property:
                  id: lbl_temperature_idle
                  name: text
                  value: "N/A"

  - platform: homeassistant
    id: esp_weather_condition
    entity_id: weather.forecast_casa_sp
    internal: true
    on_value:
      then:
        - lvgl.widget.set_property:
            id: lbl_condition_idle
            name: text
            value: !lambda return id(format_weather_condition_cpp)(id(esp_weather_condition).state).c_str();
        - lvgl.widget.set_property:
            id: lbl_weather_icon_idle
            name: text
            value: !lambda return id(get_weather_icon_glyph_cpp)(id(esp_weather_condition).state).c_str();
        - lvgl.widget.set_style_text_color: # Dynamically set icon color
            id: lbl_weather_icon_idle
            value: !lambda |-
              if (id(esp_weather_condition).state == "sunny") {
                return id(COLOR_SUN_ICON);
              }
              return id(COLOR_TEXT_ICON_TEAL);
time:
  - platform: homeassistant # Re-added for periodic weather updates
    id: esptime
    on_time:
      # Every 5 minutes
      minutes: /5
      seconds: 0
      then:
        - if:
            condition:
              lvgl.page.is_showing: lvgl_page_idle # Check if idle page is active
            then:
              # Request updates from HA for the weather sensors.
              # This will trigger their on_value automations, which update LVGL.
              - component.update: esp_weather_temp_value
              - component.update: esp_weather_temp_unit
              - component.update: esp_weather_condition