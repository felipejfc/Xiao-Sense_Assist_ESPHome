esphome:
  on_boot:
    priority: 600
    then:
      - lambda: !lambda |-
          id(last_activity_time) = millis() / 1000; // Update activity timestamp

external_components:
  - source:
      type: git
      url: https://github.com/ssieb/esphome
      ref: lp5562
    components: [ lp5562 ]
    refresh: 1min


spi:
  clk_pin: GPIO15
  mosi_pin: GPIO21

i2c:
  - id: bus_a
    sda: 45
    scl: 0
    scan: True

lp5562:
  - i2c_id: bus_a

output:
  - platform: lp5562
    id: red
    channel: 0
  - platform: lp5562
    id: green
    channel: 1
  - platform: lp5562
    id: blue
    channel: 2
  - platform: lp5562
    id: white
    channel: 3


light:
  - platform: monochromatic
    name: backlight
    id: backlight
    output: white
    restore_mode: always_on

interval:
  - interval: 5s
    then:
      - script.execute: check_idle_time


display:
  - platform: ili9xxx
    id: status_display
    model: ST7789V
    cs_pin: GPIO14
    dc_pin: GPIO42
    reset_pin: GPIO48
    dimensions:
      height: 128
      width: 128
      offset_height: 1
      offset_width: 2
    rotation: ${display_rotation}
    data_rate: ${display_data_rate}
    invert_colors: True
    auto_clear_enabled: false
    pages:
      - id: page_idle
        lambda: |-
          it.fill(id(COLOR_BACKGROUND_PEACH));
          int center_x = 64;  // Center of 128px width
          it.printf(center_x, 10, id(font_large), id(COLOR_TEXT_ICON_TEAL), TextAlign::TOP_CENTER, "\"Hey Jarvis\"");
          if (id(esp_weather_temp_value).has_state() && id(esp_weather_temp_unit).has_state()) {
            it.printf(center_x, 50, id(font_temperature), id(COLOR_TEXT_ICON_TEAL), TextAlign::TOP_CENTER, "%.0f%s", id(esp_weather_temp_value).state, id(esp_weather_temp_unit).state.c_str());
          } else {
            it.printf(center_x, 50, id(font_temperature), id(COLOR_TEXT_ICON_TEAL), TextAlign::TOP_CENTER, "N/A");
          }
          if (id(esp_weather_condition).has_state()) {
            std::string condition = id(esp_weather_condition).state;
            it.printf(center_x, 90, id(font_medium), id(COLOR_TEXT_ICON_TEAL), TextAlign::TOP_CENTER, "%s", condition.c_str());
          } else {
            it.printf(center_x, 90, id(font_medium), id(COLOR_TEXT_ICON_TEAL), TextAlign::TOP_CENTER, "Weather N/A");
          }
      - id: page_listening
        lambda: |-
          it.fill(id(COLOR_BACKGROUND_PEACH));
          it.printf(64, 64, id(font_large), id(COLOR_TEXT_ICON_TEAL), TextAlign::CENTER, "Listening...");
      - id: page_thinking
        lambda: |-
          it.fill(id(COLOR_BACKGROUND_PEACH));
          it.printf(64, 64, id(font_large), id(COLOR_TEXT_ICON_TEAL), TextAlign::CENTER, "Thinking...");
      - id: page_speaking
        lambda: |-
          it.fill(id(COLOR_BACKGROUND_PEACH));
          it.printf(64, 64, id(font_large), id(COLOR_TEXT_ICON_TEAL), TextAlign::CENTER, "Speaking...");
      - id: page_error
        lambda: |-
          it.fill(id(COLOR_BACKGROUND_PEACH));
          it.printf(64, 64, id(font_large), id(COLOR_TEXT_ICON_TEAL), TextAlign::CENTER, "Error");

font:
  - file: "gfonts://Nunito Sans@700"
    id: font_large
    size: 20
  - file: "gfonts://Nunito Sans@700"
    id: font_temperature
    size: 30
  - file: "gfonts://Nunito Sans@700"
    id: font_medium
    size: 15
  - file: "gfonts://Nunito Sans@500"
    id: font_small
    size: 10
  - file: 'fonts/materialdesignicons-webfont.ttf' # Ensure this font file is in your /fonts directory
    id: font_weather_icons
    size: 55 # Adjusted to fit card
    glyphs:  # Common weather glyphs from MDI
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0594" # mdi-weather-night
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F059D" # mdi-weather-windy
      - "\U000F0F37" # mdi-weather-sunny-alert (for exceptional)

globals:
  - id: assistant_response_text
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: display_width
    type: int
    restore_value: no
    initial_value: '128'
  - id: display_height
    type: int
    restore_value: no
    initial_value: '128'
  - id: last_activity_time
    type: int
    restore_value: no
    initial_value: '0' # Stores timestamp of last activity in seconds
  - id: backlight_state
    type: std::string
    restore_value: no
    initial_value: '"full"' # Tracks backlight state: "full", "dimmed", "off"


color:
  - id: COLOR_BACKGROUND_PEACH # Warm peach solid background
    hex: "FDD9AE"
  - id: COLOR_CARD_BACKGROUND # Soft off-white cream
    hex: "FAF4EA"
  - id: COLOR_TEXT_ICON_TEAL # Muted teal
    hex: "3A6666"
  - id: COLOR_SUN_ICON # Warm golden yellow for sun
    hex: "F4B940"
  # Remove old gradient colors if confirmed unused, keeping others for now
  - id: COLOR_BLUE
    red: 0.2
    green: 0.2
    blue: 0.8
  - id: COLOR_RED # For original error page, though new one uses teal
    red: 0.8
    green: 0.1
    blue: 0.1
  - id: COLOR_BEIGE_BG #EFE5D0 - Old
    hex: "EFE5D0"
  - id: COLOR_DARK_TEAL_BG #36555B - Old
    hex: "36555B"


micro_wake_word:
  on_wake_word_detected:
    then:
      - light.turn_on:
          id: backlight
          brightness: 100%
      - lambda: !lambda |-
          id(last_activity_time) = millis() / 1000; // Update activity timestamp
          id(backlight_state) = "full";


voice_assistant:
  id: voiceassistant

  on_client_connected:
    - lambda: !lambda |-
        id(last_activity_time) = millis() / 1000; // Update activity timestamp
        id(backlight_state) = "full";


  on_error:
    - display.page.show: page_error
    - delay: 3s
    - display.page.show: page_idle

  on_listening:
    then:
      - display.page.show: page_listening
      - lambda: !lambda |-
          id(last_activity_time) = millis() / 1000; // Update activity timestamp
  
  on_stt_end:
    then:
      - display.page.show: page_thinking
      - lambda: !lambda |-
          id(last_activity_time) = millis() / 1000; // Update activity timestamp
  
  on_start: # When voice assistant starts, go to listening. (Could also be on_wake_word_detected if using that)
    - display.page.show: page_listening
    - lambda: !lambda |-
        id(last_activity_time) = millis() / 1000; // Update activity timestamp
  
  on_tts_start: # When HA starts speaking the response
    then:
      - display.page.show: page_speaking
      - lambda: !lambda |-
          id(last_activity_time) = millis() / 1000; // Update activity timestamp

  on_tts_stream_end:
    - lambda: id(assistant_response_text) = ""; # Clear text
    - display.page.show: page_idle
    - lambda: !lambda |-
        id(last_activity_time) = millis() / 1000; // Update activity timestamp


# Scripts for Mute/Unmute
script:
  - id: check_idle_time
    then:
      - lambda: !lambda |-
          uint32_t current_time = millis() / 1000; // Current time in seconds
          uint32_t idle_time = current_time - id(last_activity_time);
          if (id(status_display).get_active_page() == id(page_idle)) {
            if (idle_time >= 60 && id(backlight_state) != "off") {
              id(backlight)->make_call().set_brightness(0).perform();
              id(backlight_state) = "off";
              ESP_LOGD("custom", "Backlight turned off after 60s idle");
            } else if (idle_time >= 30 && idle_time < 60 && id(backlight_state) != "dimmed") {
              id(backlight)->make_call().set_brightness(0.5).perform();
              id(backlight_state) = "dimmed";
              ESP_LOGD("custom", "Backlight dimmed to 50%% after 30s idle");
            }
          }

sensor:
  - platform: homeassistant
    id: esp_weather_temp_value
    entity_id: weather.forecast_casa_sp # Change to your HA weather entity
    attribute: temperature
    internal: true
    accuracy_decimals: 0

text_sensor:
  - platform: homeassistant
    id: esp_weather_temp_unit
    entity_id: weather.forecast_casa_sp
    attribute: temperature_unit
    internal: true
  - platform: homeassistant
    id: esp_weather_condition
    entity_id: weather.forecast_casa_sp
    internal: true