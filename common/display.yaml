spi:
  clk_pin: GPIO7
  mosi_pin: GPIO9
  miso_pin: GPIO8 # Optional for display-only

display:
  - platform: ili9xxx
    model: ILI9341
    cs_pin: GPIO4
    dc_pin: GPIO2
    reset_pin: GPIO3
    rotation: ${display_rotation}
    data_rate: ${display_data_rate}
    update_interval: ${display_update_interval}
    invert_colors: False
    pages:
      - id: page_idle
        lambda: |-
          int center_x = it.get_width() / 2;
          int mid_split_y = it.get_height() / 2;

          // Top half - Beige background
          it.filled_rectangle(0, 0, it.get_width(), mid_split_y, id(COLOR_BEIGE_BG));
          // "Hey Jarvis" text - Dark Teal
          it.printf(center_x, mid_split_y / 2, id(font_large), id(COLOR_DARK_TEAL_BG), TextAlign::CENTER, "Hey Jarvis");

          // Bottom half - Dark Teal background
          it.filled_rectangle(0, mid_split_y, it.get_width(), it.get_height() - mid_split_y, id(COLOR_DARK_TEAL_BG));

          // Temperature text - Beige
          if (id(esp_weather_temp_value).has_state() && id(esp_weather_temp_unit).has_state()) {
            it.printf(center_x, mid_split_y + (mid_split_y / 3), id(font_large), id(COLOR_BEIGE_BG), TextAlign::CENTER, "%.0f%s", id(esp_weather_temp_value).state, id(esp_weather_temp_unit).state.c_str());
          } else {
            it.printf(center_x, mid_split_y + (mid_split_y / 3), id(font_large), id(COLOR_BEIGE_BG), TextAlign::CENTER, "N/A");
          }
          
          // Weather condition text - Beige
          if (id(esp_weather_condition).has_state()) {
            it.printf(center_x, mid_split_y + (mid_split_y * 2 / 3), id(font_medium), id(COLOR_BEIGE_BG), TextAlign::CENTER, "%s", id(esp_weather_condition).state.c_str());
          } else {
            it.printf(center_x, mid_split_y + (mid_split_y * 2 / 3), id(font_medium), id(COLOR_BEIGE_BG), TextAlign::CENTER, "Weather N/A");
          }
      - id: page_listening
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          int center_x = it.get_width() / 2;
          // Display "Listening..." in the top part
          it.printf(center_x, it.get_height() / 3, id(font_large), esphome::COLOR_WHITE, TextAlign::CENTER, "Listening...");
          // Display a prompt to speak in the bottom part
          it.printf(center_x, it.get_height() * 2 / 3, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, "Speak now...");
      - id: page_thinking
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          int center_x = it.get_width() / 2;
          // Display "Thinking..." in the top part
          it.printf(center_x, it.get_height() / 3, id(font_large), esphome::COLOR_WHITE, TextAlign::CENTER, "Thinking...");
          // Display the recognized text in the bottom part
          if (!id(assistant_response_text).empty()) {
            it.printf(center_x, it.get_height() * 2 / 3, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, id(assistant_response_text).c_str());
          }
      - id: page_speaking
        lambda: |-
          it.fill(esphome::COLOR_BLACK);
          // Basic word wrapping is not implemented here. Text might be cut off.
          // For a better UX, more complex lambda or a custom function would be needed.
          it.print(10, 20, id(font_medium), esphome::COLOR_WHITE, id(assistant_response_text).c_str());
      - id: page_error
        lambda: |-
          it.fill(id(COLOR_RED));
          it.printf(it.get_width() / 2, 120, id(font_medium), esphome::COLOR_WHITE, TextAlign::CENTER, "Error");

font:
  - file: "gfonts://Roboto"
    id: font_large
    size: 32
  - file: "gfonts://Roboto"
    id: font_medium
    size: 20
  - file: "gfonts://Roboto"
    id: font_small # For potentially longer text or details
    size: 16

globals:
  - id: assistant_response_text
    type: std::string
    restore_value: no
    initial_value: '""'
  - id: display_width
    type: int
    restore_value: no
    initial_value: '240'
  - id: display_height
    type: int
    restore_value: no
    initial_value: '320'

color:
  - id: COLOR_BLUE
    red: 0.2
    green: 0.2
    blue: 0.8
  - id: COLOR_RED
    red: 0.8
    green: 0.1
    blue: 0.1
  - id: COLOR_BEIGE_BG #EFE5D0
    hex: "EFE5D0"
  - id: COLOR_DARK_TEAL_BG #36555B
    hex: "36555B"

voice_assistant:
  on_listening:
    then:
      - display.page.show: page_listening
  
  on_stt_end:
    then:
      - lambda: |-
          id(assistant_response_text) = x;
      - display.page.show: page_thinking
  
  on_start:
   - display.page.show: page_listening

  on_error:
    - display.page.show: page_error
    - delay: 3s
    - display.page.show: page_idle
  
  on_end:
    - display.page.show: page_idle

sensor:
  - platform: homeassistant
    id: esp_weather_temp_value
    entity_id: weather.forecast_casa_sp
    attribute: temperature
    internal: true
    accuracy_decimals: 0

text_sensor:
  - platform: homeassistant
    id: esp_weather_temp_unit
    entity_id: weather.forecast_casa_sp
    attribute: temperature_unit
    internal: true
  - platform: homeassistant
    id: esp_weather_condition
    entity_id: weather.forecast_casa_sp
    internal: true

time:
  - platform: homeassistant
    id: esptime
    on_time:
      # Every 5 minutes
      minutes: /5
      seconds: 0 # Ensure it aligns with the start of the minute
      # Update the display only if the idle page is active
      then:
        - if:
            condition:
              - display.is_page: page_idle
            then:
              - display.update:
                  id: page_idle
