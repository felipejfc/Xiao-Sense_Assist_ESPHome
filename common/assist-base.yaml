voice_assistant:
  id: voiceassistant
  microphone: echo_microphone
  noise_suppression_level: ${assist_noise_suppression_level}
  auto_gain: ${assist_auto_gain}
  volume_multiplier: ${assist_volume_multiplier}

  on_listening:
    then:
      - display.page.show: page_listening

  on_stt_end: # After speech to text, before intent processing/TTS
    then:
      - display.page.show: page_thinking

  on_tts_stream_start:
    - lambda: id(assistant_response_text) = x; # x is the text chunk
    - display.page.show: page_speaking
  
  on_tts_stream_end:
    then:
      # We could clear the text here or wait for on_end
      # - lambda: id(assistant_response_text) = "";

  on_error:
   - logger.log: "Voice assistant error!"
   - display.page.show: page_error
   - delay: 3s
   - display.page.show: page_idle
   - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.stop:
          - micro_wake_word.start:
  
  on_end:
   - lambda: id(assistant_response_text) = ""; # Clear text
   - display.page.show: page_idle
   - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - micro_wake_word.start:

button:
  - platform: template
    name: "Voice Assistant"
    on_press:
      - if:
          condition: voice_assistant.is_running
          then:
            - voice_assistant.stop:
          else:
            - voice_assistant.start: